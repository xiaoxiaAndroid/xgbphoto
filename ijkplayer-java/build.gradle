apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
//tasks.register('generateSourcesJar', Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier 'sources'
//}
android {
    // http://tools.android.com/tech-docs/new-build-system/tips
    //noinspection GroovyAssignabilityCheck
    compileSdk 34
    //noinspection GroovyAssignabilityCheck
    namespace 'tv.danmaku.ijk.media.player'

    lintOptions {
        abortOnError false
    }
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 34
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

ext {
    PUBLISH_ARTIFACT_ID = "ijkplayer-java"
}

def isAndroidProject = project.hasProperty('android')
if (isAndroidProject) {
    println("使用Android工程方式发布")
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
    task javadocsJar(type: Jar, dependsOn: androidJavadocs) {
        archiveClassifier.set("javadoc")
        from androidJavadocs.destinationDir
    }
    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from android.sourceSets.main.java.srcDirs
    }
} else {
    println("使用Java工程方式发布")
    task javadocsJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set("javadoc")
        from javadoc.destinationDir
    }
    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from sourceSets.main.allJava
    }
}

tasks.withType(Javadoc).all {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/17/docs/api"
        if (isAndroidProject) {
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
        failOnError = false
    }
    enabled = false
}

artifacts {
    archives javadocsJar, sourcesJar
}

afterEvaluate {
    publishing {
        def versionName = "0.0.1" // 当前版本依赖库版本号，这个jitpack不会使用到，只是我们开发者自己查看
        publications {
//            release(MavenPublication) {
//                // Applies the component for the release build variant.
////                from components.release // 表示发布 release（jitpack 都不会使用到）
//                // You can then customize attributes of the publication as shown below.
////                groupId = 'tv.danmaku.ijk.media.player' // 这个是依赖库的组 id
////                artifactId = 'ijkplayer-java' // 依赖库的名称（jitpack 都不会使用到）
////                version = versionName
////                artifact(sourcesJar)
////                // 指定生成的aar路径
////                artifact "$buildDir/outputs/aar/${project.name}-play.aar"
//                // pom文件中声明依赖，从而传递到使用方
//
//
//            }

            release(MavenPublication) {
                from components.findByName('release')
            }

            mavenJava(MavenPublication) {
                // 这里头是artifacts的配置信息，不填会采用默认的
                groupId = 'tv.danmaku.ijk.media.player' // 这个是依赖库的组 id
                artifactId = 'ijkplayer-java' // 依赖库的名称（jitpack 都不会使用到）
                version = versionName
//                from components.java
            }

            aar(MavenPublication) {
                groupId = 'tv.danmaku.ijk.media.player' // 这个是依赖库的组 id
                artifactId = 'ijkplayer-java' // 依赖库的名称（jitpack 都不会使用到）
                version = versionName
                // Tell maven to prepare the generated "*.aar" file for publishing
                if (isAndroidProject) {
                    artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                } else {
                    artifact("$buildDir/libs/${project.getName()}.jar")
                }
//                    artifact javadocsJar
                artifact sourcesJar
            }
        }
        repositories {
            // 下面这部分，不是很清楚加不加，但是最后加上
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                def baseUrl = buildDir.getParent()
                def releasesRepoUrl = "$baseUrl/repos/releases"
                def snapshotsRepoUrl = "$baseUrl/repos/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
}

//apply from: '../publish.gradle'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

//afterEvaluate {
//    publishing {
//        publications {
//            // Creates a Maven publication called "release".
//            release(MavenPublication) {
//                from components.release
//                groupId = 'com.github.xiaoxiaAndroid'
//                artifactId = 'ijkplayer'
//                version = '1.0.9'
//            }
//        }
//    }
//}